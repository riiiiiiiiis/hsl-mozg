import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import constants
import database
from utils import escape_markdown_v2

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /start command, including referral code logic."""
    user = update.message.from_user
    logger.info(f"START command from user {user.id} ({user.first_name})")

    if context.args and len(context.args) > 0:
        start_param = context.args[0]
        if start_param.startswith(constants.REFERRAL_START_PARAMETER):
            referral_code = start_param[len(constants.REFERRAL_START_PARAMETER):]
            coupon, status = database.validate_referral_code(referral_code, user.id)

            logger.info(f"Referral attempt by user {user.id} with code {referral_code}. Status: {status}")

            if status == "valid":
                context.user_data['pending_referral_code'] = referral_code
                context.user_data['pending_referral_info'] = dict(coupon)

                remaining = coupon['max_activations'] - coupon['current_activations']
                discount_msg = constants.REFERRAL_APPLIED_MESSAGE.format(discount=coupon['discount_percent'])
                if coupon['name']:
                    discount_msg += f"\nüè∑Ô∏è –ö—É–ø–æ–Ω: {coupon['name']}"
                discount_msg += f"\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {remaining}"
                await update.message.reply_text(discount_msg)
            else:
                await update.message.reply_text(constants.REFERRAL_EXPIRED_MESSAGE)

    keyboard = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=constants.CALLBACK_RESERVE_SPOT)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É HashSlash! üëã\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–µ–∂–∞, —è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—É–¥–∏–∏ <a href='https://hsl.sh/'>—Ö—Å–ª —â</a>. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç —è –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –æ—Å–≤–∞–∏–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.\n\n"
        "–°–µ–π—á–∞—Å —è –æ—Ç–∫—Ä—ã–ª –Ω–∞–±–æ—Ä –≤ –≥—Ä—É–ø–ø—É –ø–æ <b>–≤–∞–π–±–∫–æ–¥–∏–Ω–≥—É</b>. –í–∞–π–±–∫–æ–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∞–π—Ç—ã, –Ω–µ —Ç—Ä–∞—Ç—è –≥–æ–¥—ã –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=reply_markup,
        parse_mode='HTML',
        disable_web_page_preview=True
    )

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Clears all user data for the current chat session."""
    context.user_data.clear()
    logger.info(f"User {update.message.from_user.id} reset their session.")
    await update.message.reply_text(
        "üîÑ –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è /start."
    )

async def create_referral_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to create a new referral coupon."""
    user = update.message.from_user
    if constants.REFERRAL_ADMIN_IDS and user.id not in constants.REFERRAL_ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_referral <–ø—Ä–æ—Ü–µ–Ω—Ç> <–∞–∫—Ç–∏–≤–∞—Ü–∏–∏>")
        return

    try:
        discount = int(context.args[0])
        activations = int(context.args[1])

        if discount not in constants.REFERRAL_DISCOUNTS:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏.")
            return

        code = database.generate_and_save_referral_code(discount, activations, user.id)
        bot_username = context.bot.username
        link = f"https://t.me/{bot_username}?start={constants.REFERRAL_START_PARAMETER}{code}"

        logger.info(f"Admin {user.id} created a new referral code: {code}")
        await update.message.reply_text(
            f"‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω\!\n–ö–æ–¥: `{escape_markdown_v2(code)}`\n"
            f"–°–∫–∏–¥–∫–∞: {discount}%\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n\n"
            f"–°—Å—ã–ª–∫–∞: `{escape_markdown_v2(link)}`",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /create_referral 20 10")
    except Exception as e:
        logger.error(f"Error creating referral code: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.")

async def referral_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to view referral coupon statistics."""
    user = update.message.from_user
    if constants.REFERRAL_ADMIN_IDS and user.id not in constants.REFERRAL_ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    coupons = database.get_referral_stats()
    if not coupons:
        await update.message.reply_text("üìä –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.")
        return

    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤:*\n\n"
    for coupon in coupons:
        status = "‚úÖ" if coupon['is_active'] and coupon['current_activations'] < coupon['max_activations'] else "‚ùå"
        message += (
            f"{status} –ö–æ–¥: `{escape_markdown_v2(coupon['code'])}`\n"
            f"   –°–∫–∏–¥–∫–∞: {coupon['discount_percent']}%, "
            f"–ò—Å–ø\.: {coupon['current_activations']}/{coupon['max_activations']}\n"
            f"-------------------\n"
        )
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN_V2)