import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import config
import constants
from utils import escape_markdown_v2, get_approval_timestamp
from db import courses as db_courses
from db import bookings as db_bookings
from db import events as db_events
from db import referrals as db_referrals
from db import free_lessons as db_free_lessons

logger = logging.getLogger(__name__)

async def main_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """The main router for all callback queries."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    data = query.data

    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username or ""
    context.user_data['first_name'] = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if data.startswith(constants.CALLBACK_SELECT_COURSE_PREFIX):
        await handle_select_course(query, context)
    elif data == constants.CALLBACK_CONFIRM_COURSE_SELECTION:
        await handle_confirm_selection(query, context)
    elif data.startswith(constants.CALLBACK_CANCEL_RESERVATION):
        await handle_cancel_reservation(query, context)
    elif data.startswith(constants.CALLBACK_ADMIN_APPROVE_PAYMENT):
        await handle_admin_approve(query, context)
    elif data.startswith(constants.CALLBACK_FREE_LESSON_REGISTER_PREFIX):
        await handle_free_lesson_register_by_id(query, context)
    elif data.startswith(constants.CALLBACK_FREE_LESSON_PREFIX):
        await handle_free_lesson_by_id(query, context)
    # Legacy handlers (deprecated but kept for backward compatibility)
    elif data == constants.CALLBACK_FREE_LESSON_INFO if hasattr(constants, 'CALLBACK_FREE_LESSON_INFO') else False:
        await handle_free_lesson_info(query, context)
    elif data == constants.CALLBACK_FREE_LESSON_REGISTER if hasattr(constants, 'CALLBACK_FREE_LESSON_REGISTER') else False:
        await handle_free_lesson_register(query, context)
    else:
        logger.warning(f"Unhandled callback data: {data} from user {user.id}")
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback'–∏
        db_events.log_event(
            user.id, 
            'unknown_callback', 
            details={'callback_data': data},
            username=context.user_data['username'],
            first_name=context.user_data['first_name']
        )

async def handle_select_course(query, context):
    """Shows details for a dynamically selected course."""
    try:
        course_id = int(query.data.replace(constants.CALLBACK_SELECT_COURSE_PREFIX, ''))
    except (ValueError, IndexError):
        logger.error(f"Invalid course callback data: {query.data}")
        return

    course = db_courses.get_course_by_id(course_id)
    if not course:
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∫—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    context.user_data['pending_course_id'] = course_id
    db_events.log_event(
        query.from_user.id, 
        'view_program', 
        details={'course_id': course_id},
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )

    price_usd = course['price_usd_cents'] / 100
    referral_info = context.user_data.get('pending_referral_info')
    
    price_info_str = f"<b>${price_usd:.0f}</b>"
    if referral_info:
        discount = referral_info['discount_percent']
        discounted_price = price_usd * (1 - discount / 100)
        price_info_str = f"<s>${price_usd:.0f}</s> <b>${discounted_price:.0f}</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"

    text = (
        f"<b>–ö—É—Ä—Å:</b> {course['name']}\n"
        f"<b>–ò–º—è:</b> {context.user_data['first_name']}\n"
        f"<b>–°—Ç–∞—Ä—Ç:</b> {course['start_date_text']}\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_info_str}\n\n"
        f"{course['description']}"
    )
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ", callback_data=constants.CALLBACK_CONFIRM_COURSE_SELECTION)]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML', disable_web_page_preview=True)

async def handle_confirm_selection(query, context):
    """Confirms course selection and creates a preliminary booking."""
    user_id = context.user_data['user_id']
    course_id = context.user_data.get('pending_course_id')

    if not course_id:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    course = db_courses.get_course_by_id(course_id)
    referral_code = context.user_data.get('pending_referral_code')
    referral_info = context.user_data.get('pending_referral_info')
    discount_percent = referral_info['discount_percent'] if referral_info else 0

    booking_id = db_bookings.create_booking(
        user_id,
        context.user_data['username'],
        context.user_data['first_name'],
        course_id,
        referral_code,
        discount_percent
    )

    if not booking_id:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    db_events.log_event(
        user_id, 
        'booking_created', 
        details={'course_id': course_id, 'booking_id': booking_id},
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )
    if referral_info:
        db_referrals.apply_referral_discount(referral_info['id'], user_id, booking_id)

    price_usd = course['price_usd_cents'] / 100
    discounted_price_usd = price_usd * (1 - discount_percent / 100)
    
    price_rub = round(discounted_price_usd * config.USD_TO_RUB_RATE, 2)
    price_kzt = round(discounted_price_usd * config.USD_TO_KZT_RATE, 2)
    price_ars = round(discounted_price_usd * config.USD_TO_ARS_RATE, 2)

    esc_course_name = escape_markdown_v2(course['name'])
    esc_booking_id = escape_markdown_v2(str(booking_id))
    esc_notice = escape_markdown_v2(constants.BOOKING_DURATION_NOTICE)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    esc_tbank_card = escape_markdown_v2(config.TBANK_CARD_NUMBER)
    esc_tbank_holder = escape_markdown_v2(config.TBANK_CARD_HOLDER)
    esc_kaspi_card = escape_markdown_v2(config.KASPI_CARD_NUMBER)
    esc_ars_alias = escape_markdown_v2(config.ARS_ALIAS)
    esc_usdt_address = escape_markdown_v2(config.USDT_TRC20_ADDRESS)
    
    message_text = (
        f"üìù –í–∞—à–µ –º–µ—Å—Ç–æ –Ω–∞ –∫—É—Ä—Å '*{esc_course_name}*' –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ \(–ó–∞—è–≤–∫–∞ ‚Ññ*{esc_booking_id}*\)\.\n\n"
        f"‚è≥ _{esc_notice}_\n\n"
        f"üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
        f"üá∑üá∫ *–¢\-–ë–∞–Ω–∫ \({escape_markdown_v2(f'{price_rub:.2f} RUB')}\):*\n"
        f"  –ö–∞—Ä—Ç–∞: `{esc_tbank_card}`\n"
        f"  –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {esc_tbank_holder}\n\n"
        f"üá∞üáø *Kaspi \({escape_markdown_v2(f'{price_kzt:.2f} KZT')}\):*\n"
        f"  –ö–∞—Ä—Ç–∞: `{esc_kaspi_card}`\n\n"
        f"üá¶üá∑ *–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ \({escape_markdown_v2(f'{price_ars:.2f} ARS')}\):*\n"
        f"  Alias: `{esc_ars_alias}`\n\n"
        f"üí∏ *USDT TRC\-20 \({escape_markdown_v2(f'{discounted_price_usd:.2f} USDT')}\):*\n"
        f"  –ê–¥—Ä–µ—Å: `{esc_usdt_address}`\n\n"
        f"üßæ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç\."
    )

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"{constants.CALLBACK_CANCEL_RESERVATION}_{booking_id}")]]
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def handle_cancel_reservation(query, context):
    """Handles cancellation of a pending reservation."""
    try:
        booking_id = int(query.data.split('_')[-1])
        user_id = context.user_data['user_id']
    except (ValueError, IndexError):
        logger.error(f"Invalid cancel callback data: {query.data}")
        return

    if db_bookings.update_booking_status(booking_id, -1):
        logger.info(f"User {user_id} cancelled booking {booking_id}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        db_events.log_event(
            user_id, 
            'booking_cancelled', 
            details={'booking_id': booking_id},
            username=context.user_data['username'],
            first_name=context.user_data['first_name']
        )
        await query.edit_message_text("–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /start.")
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

async def handle_admin_approve(query, context):
    """Handles an admin approving a payment."""
    try:
        parts = query.data.split('_')
        target_user_id = int(parts[-2])
        booking_id = int(parts[-1])
    except (ValueError, IndexError):
        logger.error(f"Invalid admin approve callback: {query.data}")
        return

    if db_bookings.update_booking_status(booking_id, 2):
        logger.info(f"Admin {query.from_user.id} approved payment for booking {booking_id}")
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
        db_events.log_event(
            target_user_id, 
            'payment_approved', 
            details={'booking_id': booking_id, 'approved_by': query.from_user.id},
            username=None,  # username —Ü–µ–ª–∏ –ø–æ–ª—É—á–∏–º –∏–∑ bookings
            first_name=None
        )
        
        # Preserve original message content and append approval status
        try:
            # First, remove the inline keyboard while keeping the content
            await query.edit_message_reply_markup(reply_markup=None)
            
            # Then append approval status to the original message
            original_text = query.message.text or query.message.caption or ""
            approval_timestamp = get_approval_timestamp()
            approval_status = f"\n\n‚úÖ –û–î–û–ë–†–ï–ù–û - {approval_timestamp}"
            
            # Update message with appended approval status
            updated_text = original_text + approval_status
            
            # Try to edit the message text/caption
            if query.message.text:
                await query.edit_message_text(updated_text)
            elif query.message.caption:
                await query.edit_message_caption(caption=updated_text)
            else:
                # Fallback: send a new message if we can't edit
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{booking_id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}) –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê. {approval_timestamp}"
                )
                
        except Exception as e:
            logger.warning(f"Failed to preserve message content for booking {booking_id}: {e}")
            # Fallback to current behavior
            try:
                await query.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{booking_id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}) –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê.")
            except Exception as fallback_error:
                logger.error(f"Fallback message edit also failed for booking {booking_id}: {fallback_error}")
        
        booking_details = db_bookings.get_booking_details(booking_id)
        is_consultation = False # Placeholder, add logic if consultation courses exist
        if booking_details:
            # Example: check if course ID corresponds to a consultation
            # is_consultation = booking_details['course_id'] in [3, 4]
            pass

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        user_first_name = booking_details.get('first_name', '–î—Ä—É–≥') if booking_details else '–î—Ä—É–≥'
        
        confirmation_text = f"""–ü—Ä–∏–≤–µ—Ç, {user_first_name}!

–¢—ã –≤ –ü–æ—Ç–æ–∫–µ BOCTOK (13, 20, 27 –∞–≤–≥—É—Å—Ç–∞ –∏ 3 —Å–µ–Ω—Ç—è–±—Ä—è).

–ß—Ç–æ –¥–∞–ª—å—à–µ:
1. 13 –∞–≤–≥—É—Å—Ç–∞ –≤ 21:00 –ø–æ –º—Å–∫ - –ø–µ—Ä–≤—ã–π –ª–∞–π–≤: https://calendar.app.google/AcavEBkN1ZTMsQ1q6
2. –í—Å—Ç—É–ø–∞–π –≤ –≥—Ä—É–ø–ø—É –ø–æ—Ç–æ–∫–∞: https://t.me/+oxpLHOBteD41ZThi

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ @serejaris
"""
        
        if is_consultation:
            confirmation_text += f"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {constants.CALENDAR_LINK}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        photo_file_id = "AgACAgIAAxkBAAE5FuNolBevwD24uQRSmq28gsyV6FWTnQACdvsxG81-oUhX08cmOnTLeQEAAwIAA3kAAzYE"
        await context.bot.send_photo(
            chat_id=target_user_id, 
            photo=photo_file_id,
            caption=confirmation_text
        )
    else:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ{booking_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

async def handle_free_lesson_info(query, context):
    """Shows information about the free lesson."""
    user_id = context.user_data['user_id']
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —É—Ä–æ–∫–µ
    db_events.log_event(
        user_id, 
        'free_lesson_info_viewed',
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ (cursor_lesson)
    is_registered = db_free_lessons.is_user_registered_for_lesson_type(user_id, 'cursor_lesson')
    
    text = (
        f"<b>{constants.FREE_LESSON['title']}</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {constants.FREE_LESSON['date_text']}\n\n"
        f"{constants.FREE_LESSON['description']}"
    )
    
    keyboard = []
    if is_registered:
        # –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        registration = db_free_lessons.get_registration_by_user_and_type(user_id, 'cursor_lesson')
        text += f"\n\n‚úÖ <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\nüìß Email: {registration['email']}\nüîî –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞."
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard.append([InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫", callback_data=constants.CALLBACK_FREE_LESSON_REGISTER)])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML', disable_web_page_preview=True)

async def handle_free_lesson_register(query, context):
    """Initiates free lesson registration process."""
    user_id = context.user_data['user_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ (cursor_lesson)
    if db_free_lessons.is_user_registered_for_lesson_type(user_id, 'cursor_lesson'):
        registration = db_free_lessons.get_registration_by_user_and_type(user_id, 'cursor_lesson')
        message = constants.FREE_LESSON_ALREADY_REGISTERED.format(
            date=constants.FREE_LESSON['date_text']
        )
        await query.edit_message_text(message, parse_mode='HTML')
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    context.user_data['awaiting_free_lesson_email'] = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    db_events.log_event(
        user_id, 
        'free_lesson_registration_started',
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )
    
    await query.edit_message_text(constants.FREE_LESSON_EMAIL_REQUEST, parse_mode='HTML')


async def handle_free_lesson_by_id(query, context):
    """Shows information about a specific lesson by ID"""
    logger.info(f"DEBUG: handle_free_lesson_by_id called with callback: '{query.data}'")
    
    try:
        raw_id_str = query.data.replace(constants.CALLBACK_FREE_LESSON_PREFIX, '')
        lesson_id = int(raw_id_str)
        logger.info(f"DEBUG: Successfully parsed lesson_id: {lesson_id} from '{query.data}'")
    except ValueError:
        logger.error(f"ERROR: Failed to parse lesson_id from callback '{query.data}'")
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞")
        return
    
    lesson_type, lesson_data = constants.get_lesson_by_id(lesson_id)
    if not lesson_data:
        await query.edit_message_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = context.user_data['user_id']
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Ä–æ–∫–µ
    db_events.log_event(
        user_id, 
        'free_lesson_info_viewed',
        details={'lesson_type': lesson_type, 'lesson_id': lesson_id},
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫
    is_registered = db_free_lessons.is_user_registered_for_lesson_type(user_id, lesson_type)
    
    text = f"<b>{lesson_data['title']}</b>\n\n{lesson_data['description']}"
    
    keyboard = []
    if is_registered:
        message = constants.FREE_LESSON_ALREADY_REGISTERED.format(
            date=lesson_data['description']  # Description contains the date and all info
        )
        await query.edit_message_text(message, parse_mode='HTML')
    else:
        register_callback = f"{constants.CALLBACK_FREE_LESSON_REGISTER_PREFIX}{lesson_id}"
        logger.info(f"DEBUG: Creating register button with callback: '{register_callback}' (lesson_id: {lesson_id})")
        keyboard.append([InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=register_callback)])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def handle_free_lesson_register_by_id(query, context):
    """Starts registration process for a specific lesson by ID"""
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"DEBUG: Raw callback data: '{query.data}'")
    logger.info(f"DEBUG: Expected prefix: '{constants.CALLBACK_FREE_LESSON_REGISTER_PREFIX}'")
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        raw_id_str = query.data.replace(constants.CALLBACK_FREE_LESSON_REGISTER_PREFIX, '')
        logger.info(f"DEBUG: After prefix removal: '{raw_id_str}'")
        
        lesson_id = int(raw_id_str)
        logger.info(f"DEBUG: Parsed lesson_id: {lesson_id}")
        
    except ValueError as e:
        logger.error(f"ERROR: Failed to parse lesson_id from callback '{query.data}': {e}")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —É—Ä–æ–∫–∞. –î–∞–Ω–Ω—ã–µ: {query.data}")
        return
    
    lesson_type, lesson_data = constants.get_lesson_by_id(lesson_id)
    logger.info(f"DEBUG: Lesson lookup result - lesson_type: {lesson_type}, lesson_data: {lesson_data is not None}")
    
    if not lesson_data:
        logger.error(f"ERROR: Lesson with ID {lesson_id} not found in constants")
        await query.edit_message_text(f"–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {lesson_id})")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª (—Å —É—á–µ—Ç–æ–º grace period)
    from datetime import datetime, timedelta, timezone
    lesson_datetime = lesson_data.get('datetime')
    if lesson_datetime:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_time = datetime.now(timezone.utc)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º lesson_datetime –≤ UTC –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
        if lesson_datetime.tzinfo is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
            lesson_datetime = lesson_datetime.replace(tzinfo=timezone.utc)
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            lesson_datetime = lesson_datetime.astimezone(timezone.utc)
        
        grace_period = timedelta(hours=2)
        if current_time > lesson_datetime + grace_period:
            await query.edit_message_text(
                "üïê –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤–æ—Ä–∫—à–æ–ø —É–∂–µ –ø—Ä–æ—à–µ–ª.\n\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!",
                parse_mode='HTML'
            )
            return
    
    user_id = context.user_data['user_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
    if db_free_lessons.is_user_registered_for_lesson_type(user_id, lesson_type):
        message = constants.FREE_LESSON_ALREADY_REGISTERED.format(
            date=lesson_data.get('date_text', '–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')  # Use date_text field instead of full description
        )
        await query.edit_message_text(message, parse_mode='HTML')
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_type –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    context.user_data['pending_lesson_type'] = lesson_type
    context.user_data['awaiting_free_lesson_email'] = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫
    db_events.log_event(
        user_id, 
        'free_lesson_registration_started',
        details={'lesson_type': lesson_type, 'lesson_id': lesson_id},
        username=context.user_data['username'],
        first_name=context.user_data['first_name']
    )
    
    await query.edit_message_text(constants.FREE_LESSON_EMAIL_REQUEST, parse_mode='HTML')