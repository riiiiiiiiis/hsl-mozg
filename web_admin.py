#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ Flask
"""

from flask import Flask, render_template, jsonify, request, redirect, url_for
import sqlite3
from datetime import datetime, timedelta
import subprocess
import sys
import random
import string
import config
import referral_config

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'

def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(config.DB_NAME)
    conn.row_factory = sqlite3.Row
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {referral_config.REFERRAL_TABLE_NAME} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                name TEXT,
                discount_percent INTEGER NOT NULL,
                max_activations INTEGER NOT NULL,
                current_activations INTEGER DEFAULT 0,
                created_by INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        """)
        
        conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {referral_config.REFERRAL_USAGE_TABLE_NAME} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                coupon_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                booking_id INTEGER,
                used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (coupon_id) REFERENCES {referral_config.REFERRAL_TABLE_NAME}(id),
                FOREIGN KEY (booking_id) REFERENCES bookings(id),
                UNIQUE(coupon_id, user_id)
            )
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É bookings –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(bookings)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'referral_code' not in columns:
            conn.execute("ALTER TABLE bookings ADD COLUMN referral_code TEXT")
            print("Added referral_code column to bookings table")
        
        if 'discount_percent' not in columns:
            conn.execute("ALTER TABLE bookings ADD COLUMN discount_percent INTEGER DEFAULT 0")
            print("Added discount_percent column to bookings table")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É name –≤ —Ç–∞–±–ª–∏—Ü—É referral_coupons
        cursor.execute(f"PRAGMA table_info({referral_config.REFERRAL_TABLE_NAME})")
        ref_columns = [column[1] for column in cursor.fetchall()]
        
        if 'name' not in ref_columns:
            conn.execute(f"ALTER TABLE {referral_config.REFERRAL_TABLE_NAME} ADD COLUMN name TEXT")
            print("Added name column to referral_coupons table")
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"Error creating referral tables: {e}")
    
    return conn

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT COUNT(*) as total FROM bookings")
    total = cursor.fetchone()['total']
    
    # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    cursor.execute("""
        SELECT confirmed, COUNT(*) as count 
        FROM bookings 
        GROUP BY confirmed
    """)
    status_stats = cursor.fetchall()
    
    # –ü–æ –∫—É—Ä—Å–∞–º
    cursor.execute("""
        SELECT chosen_course, COUNT(*) as count 
        FROM bookings 
        GROUP BY chosen_course
    """)
    course_stats = cursor.fetchall()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    cursor.execute("""
        SELECT username, first_name, chosen_course, confirmed, created_at 
        FROM bookings 
        ORDER BY created_at DESC 
        LIMIT 10
    """)
    recent_bookings = cursor.fetchall()
    
    conn.close()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
    status_names = {
        '0': {'name': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'icon': '‚è≥', 'color': 'warning'},
        '1': {'name': '–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫', 'icon': 'üì∏', 'color': 'info'},
        '2': {'name': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', 'icon': '‚úÖ', 'color': 'success'},
        '-1': {'name': '–û—Ç–º–µ–Ω–µ–Ω–æ', 'icon': '‚ùå', 'color': 'danger'}
    }
    
    status_data = []
    for stat in status_stats:
        status_info = status_names.get(str(stat['confirmed']), {
            'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'icon': '‚ùì', 'color': 'secondary'
        })
        status_data.append({
            'name': status_info['name'],
            'icon': status_info['icon'],
            'color': status_info['color'],
            'count': stat['count']
        })
    
    return render_template('index.html', 
                         total=total,
                         status_data=status_data,
                         course_stats=course_stats,
                         recent_bookings=recent_bookings,
                         status_names=status_names)

@app.route('/confirmed')
def confirmed_users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT user_id, username, first_name, chosen_course, created_at
        FROM bookings
        WHERE confirmed = 2
        ORDER BY chosen_course, created_at DESC
    """)
    
    participants = cursor.fetchall()
    conn.close()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
    courses = {}
    for p in participants:
        course = p['chosen_course']
        if course not in courses:
            courses[course] = []
        courses[course].append(p)
    
    # –°–ø–∏—Å–æ–∫ ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    user_ids = [p['user_id'] for p in participants]
    
    return render_template('confirmed.html', 
                         courses=courses,
                         total=len(participants),
                         user_ids=user_ids)

@app.route('/unconfirmed')
def unconfirmed_users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT user_id, username, first_name, chosen_course, confirmed, created_at
        FROM bookings
        WHERE confirmed != 2
        ORDER BY confirmed, created_at DESC
    """)
    
    participants = cursor.fetchall()
    conn.close()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    statuses = {
        0: {"name": "–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "icon": "üïê", "color": "warning", "participants": []},
        1: {"name": "–ó–∞–≥—Ä—É–∑–∏–ª–∏ —á–µ–∫ (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)", "icon": "üì∏", "color": "info", "participants": []},
        -1: {"name": "–û—Ç–º–µ–Ω–µ–Ω–æ", "icon": "‚ùå", "color": "danger", "participants": []}
    }
    
    for p in participants:
        status = p['confirmed']
        if status in statuses:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
            created_dt = datetime.strptime(p['created_at'], "%Y-%m-%d %H:%M:%S")
            time_passed = datetime.now() - created_dt
            
            participant_data = dict(p)
            participant_data['days_passed'] = time_passed.days
            participant_data['hours_passed'] = time_passed.seconds // 3600
            participant_data['is_overdue'] = (status == 0 and time_passed.days > 1)
            
            statuses[status]["participants"].append(participant_data)
    
    return render_template('unconfirmed.html', statuses=statuses)

@app.route('/delete-test-users', methods=['POST'])
def delete_test_users():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) as count FROM bookings WHERE username = 'r1iiis'")
        count = cursor.fetchone()['count']
        
        if count > 0:
            cursor.execute("DELETE FROM bookings WHERE username = 'r1iiis'")
            conn.commit()
        
        conn.close()
        
        return jsonify({'success': True, 'deleted': count})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/prepare-messaging')
def prepare_messaging():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        result = subprocess.run([sys.executable, 'send_message_to_confirmed.py'], 
                              capture_output=True, text=True)
        
        return render_template('messaging.html', 
                             output=result.stdout,
                             error=result.stderr)
    except Exception as e:
        return render_template('messaging.html', 
                             output="",
                             error=str(e))

@app.route('/referrals')
def referrals():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫—É–ø–æ–Ω–∞–º–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–ø–æ–Ω—ã
    cursor.execute(f"""
        SELECT id, code, name, discount_percent, max_activations, current_activations, 
               created_at, is_active, created_by
        FROM {referral_config.REFERRAL_TABLE_NAME}
        ORDER BY created_at DESC
    """)
    coupons = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    cursor.execute(f"""
        SELECT r.coupon_id, COUNT(*) as usage_count, MAX(r.used_at) as last_used
        FROM {referral_config.REFERRAL_USAGE_TABLE_NAME} r
        GROUP BY r.coupon_id
    """)
    usage_stats = {row['coupon_id']: row for row in cursor.fetchall()}
    
    conn.close()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    coupon_data = []
    for coupon in coupons:
        usage = usage_stats.get(coupon['id'], {})
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ usage —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ Row –æ–±—ä–µ–∫—Ç–æ–º
        if usage and not isinstance(usage, dict):
            last_used = usage['last_used'] if usage['last_used'] else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
        else:
            last_used = usage.get('last_used', '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω') if isinstance(usage, dict) else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
            
        coupon_data.append({
            'id': coupon['id'],
            'code': coupon['code'],
            'name': coupon['name'] or '',
            'discount_percent': coupon['discount_percent'],
            'max_activations': coupon['max_activations'],
            'current_activations': coupon['current_activations'],
            'created_at': coupon['created_at'],
            'is_active': coupon['is_active'],
            'last_used': last_used,
            'remaining': coupon['max_activations'] - coupon['current_activations'],
            'is_expired': coupon['current_activations'] >= coupon['max_activations']
        })
    
    return render_template('referrals.html', 
                         coupons=coupon_data,
                         available_discounts=referral_config.REFERRAL_DISCOUNTS)

@app.route('/create-referral', methods=['POST'])
def create_referral():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫—É–ø–æ–Ω–∞"""
    try:
        discount_percent = int(request.form.get('discount_percent'))
        max_activations = int(request.form.get('max_activations'))
        name = request.form.get('name', '').strip()
        
        if discount_percent not in referral_config.REFERRAL_DISCOUNTS:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏'})
        
        if max_activations <= 0:
            return jsonify({'success': False, 'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'})
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        code = ''.join(random.choices(referral_config.REFERRAL_CODE_CHARS, k=referral_config.REFERRAL_CODE_LENGTH))
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            INSERT INTO {referral_config.REFERRAL_TABLE_NAME} 
            (code, name, discount_percent, max_activations, created_by) 
            VALUES (?, ?, ?, ?, ?)
        """, (code, name, discount_percent, max_activations, 0))  # 0 - ID –∞–¥–º–∏–Ω–∞ –∏–∑ –≤–µ–±-–ø–∞–Ω–µ–ª–∏
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True, 
            'code': code,
            'name': name,
            'link': f"https://t.me/hashslash_bot?start={referral_config.REFERRAL_START_PARAMETER}{code}"
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/toggle-referral/<int:coupon_id>', methods=['POST'])
def toggle_referral(coupon_id):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            UPDATE {referral_config.REFERRAL_TABLE_NAME}
            SET is_active = CASE WHEN is_active = 1 THEN 0 ELSE 1 END
            WHERE id = ?
        """, (coupon_id,))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/update-referral-name/<int:coupon_id>', methods=['POST'])
def update_referral_name(coupon_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—É–ø–æ–Ω–∞"""
    try:
        name = request.form.get('name', '').strip()
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            UPDATE {referral_config.REFERRAL_TABLE_NAME}
            SET name = ?
            WHERE id = ?
        """, (name, coupon_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/update-referral-discount/<int:coupon_id>', methods=['POST'])
def update_referral_discount(coupon_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –∫—É–ø–æ–Ω–∞"""
    try:
        discount_percent = int(request.form.get('discount_percent'))
        
        if discount_percent < 0 or discount_percent > 100:
            return jsonify({'success': False, 'error': '–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%'})
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(f"""
            UPDATE {referral_config.REFERRAL_TABLE_NAME}
            SET discount_percent = ?
            WHERE id = ?
        """, (discount_percent, coupon_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    import os
    if not os.path.exists('templates'):
        os.makedirs('templates')
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    print("üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5001")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(debug=True, host='127.0.0.1', port=5001)