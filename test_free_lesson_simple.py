#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ –ë–î).
"""

import unittest
import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import constants


def validate_email_simple(email):
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ë–î."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


class TestFreeLessonSimple(unittest.TestCase):
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
    
    def test_email_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤."""
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ email
        valid_emails = [
            "test@example.com",
            "user.name@domain.co.uk", 
            "user+tag@example.org",
            "123@test.com"
        ]
        
        for email in valid_emails:
            with self.subTest(email=email):
                self.assertTrue(
                    validate_email_simple(email),
                    f"Email {email} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
                )
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ email
        invalid_emails = [
            "invalid-email",
            "@example.com",
            "test@",
            "test.example.com",
            "",
            "test@.com",
            "test@com"
        ]
        
        for email in invalid_emails:
            with self.subTest(email=email):
                self.assertFalse(
                    validate_email_simple(email),
                    f"Email {email} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
                )
    
    def test_constants_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        self.assertIn('FREE_LESSON', dir(constants))
        
        free_lesson = constants.FREE_LESSON
        required_fields = ['title', 'button_text', 'description', 'date_text', 'google_meet_link', 'is_active']
        
        for field in required_fields:
            with self.subTest(field=field):
                self.assertIn(field, free_lesson, f"–ü–æ–ª–µ {field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ FREE_LESSON")
                self.assertIsNotNone(free_lesson[field], f"–ü–æ–ª–µ {field} –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        self.assertIsInstance(free_lesson['title'], str)
        self.assertIsInstance(free_lesson['button_text'], str)
        self.assertIsInstance(free_lesson['description'], str)
        self.assertIsInstance(free_lesson['date_text'], str)
        self.assertIsInstance(free_lesson['google_meet_link'], str)
        self.assertIsInstance(free_lesson['is_active'], bool)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ Google Meet –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        self.assertTrue(
            free_lesson['google_meet_link'].startswith('https://meet.google.com/'),
            "–°—Å—ã–ª–∫–∞ Google Meet –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://meet.google.com/"
        )
    
    def test_callback_constants(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è callback'–æ–≤."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ callback –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        self.assertTrue(hasattr(constants, 'CALLBACK_FREE_LESSON_INFO'))
        self.assertTrue(hasattr(constants, 'CALLBACK_FREE_LESSON_REGISTER'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        self.assertIsInstance(constants.CALLBACK_FREE_LESSON_INFO, str)
        self.assertIsInstance(constants.CALLBACK_FREE_LESSON_REGISTER, str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        self.assertNotEqual(constants.CALLBACK_FREE_LESSON_INFO, "")
        self.assertNotEqual(constants.CALLBACK_FREE_LESSON_REGISTER, "")
    
    def test_free_lesson_messages(self):
        """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        message_constants = [
            'FREE_LESSON_EMAIL_REQUEST',
            'FREE_LESSON_EMAIL_INVALID', 
            'FREE_LESSON_REGISTRATION_SUCCESS',
            'FREE_LESSON_ALREADY_REGISTERED',
            'FREE_LESSON_REMINDER'
        ]
        
        for msg_const in message_constants:
            with self.subTest(constant=msg_const):
                self.assertTrue(hasattr(constants, msg_const), f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {msg_const} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                msg_value = getattr(constants, msg_const)
                self.assertIsInstance(msg_value, str, f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {msg_const} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                self.assertNotEqual(msg_value, "", f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {msg_const} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π")


def run_simple_tests():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞...")
    
    # –°–æ–∑–¥–∞—ë–º test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestFreeLessonSimple)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if result.wasSuccessful():
        print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {result.testsRun} —Ç–µ—Å—Ç–æ–≤.")
        return True
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –í—ã–ø–æ–ª–Ω–µ–Ω–æ {result.testsRun} —Ç–µ—Å—Ç–æ–≤.")
        print(f"–û—à–∏–±–∫–∏: {len(result.errors)}, –ù–µ—É–¥–∞—á–∏: {len(result.failures)}")
        return False


if __name__ == "__main__":
    success = run_simple_tests()
    sys.exit(0 if success else 1)