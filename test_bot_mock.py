#!/usr/bin/env python3
"""
Mock —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î.
"""

import asyncio
from unittest.mock import Mock, AsyncMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import constants
from handlers.callback_handlers import handle_free_lesson_info, handle_free_lesson_register
from handlers.message_handlers import handle_email_input


class MockQuery:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è callback query."""
    def __init__(self, data, user_id=12345):
        self.data = data
        self.from_user = Mock()
        self.from_user.id = user_id
        self.from_user.username = "testuser"
        self.from_user.first_name = "Test User"
        self.edit_message_text = AsyncMock()
        self.answer = AsyncMock()


class MockUpdate:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è update."""
    def __init__(self, text=None, user_id=12345):
        self.message = Mock()
        self.message.from_user = Mock()
        self.message.from_user.id = user_id
        self.message.from_user.username = "testuser"
        self.message.from_user.first_name = "Test User"
        self.message.text = text
        self.message.reply_text = AsyncMock()


class MockContext:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è context."""
    def __init__(self):
        self.user_data = {
            'user_id': 12345,
            'username': 'testuser',
            'first_name': 'Test User'
        }


async def test_free_lesson_flow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞...")
    
    # Mock –¥–ª—è –ë–î —Ñ—É–Ω–∫—Ü–∏–π
    import db.free_lessons as db_free_lessons
    import db.events as db_events
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î –Ω–∞ mock'–∏
    original_is_registered = db_free_lessons.is_user_registered
    original_get_registration = db_free_lessons.get_registration_by_user
    original_create_registration = db_free_lessons.create_free_lesson_registration
    original_log_event = db_events.log_event
    
    db_free_lessons.is_user_registered = Mock(return_value=False)
    db_free_lessons.get_registration_by_user = Mock(return_value=None)
    db_free_lessons.create_free_lesson_registration = Mock(return_value=123)
    db_events.log_event = Mock()
    
    try:
        # 1. –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —É—Ä–æ–∫–µ
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        query = MockQuery(constants.CALLBACK_FREE_LESSON_INFO)
        context = MockContext()
        
        await handle_free_lesson_info(query, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        query.edit_message_text.assert_called_once()
        call_args = query.edit_message_text.call_args[1]
        
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {call_args['text'][:100]}...")
        print(f"‚úÖ –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {'reply_markup' in call_args}")
        
        # 2. –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        query2 = MockQuery(constants.CALLBACK_FREE_LESSON_REGISTER)
        context2 = MockContext()
        
        await handle_free_lesson_register(query2, context2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email: {context2.user_data.get('awaiting_free_lesson_email', False)}")
        
        # 3. –¢–µ—Å—Ç –≤–≤–æ–¥–∞ email
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ email...")
        update = MockUpdate("test@example.com")
        context3 = MockContext()
        context3.user_data['awaiting_free_lesson_email'] = True
        
        await handle_email_input(update, context3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        db_free_lessons.create_free_lesson_registration.assert_called_once()
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ: {'awaiting_free_lesson_email' not in context3.user_data}")
        
        # 4. –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email...")
        update_invalid = MockUpdate("invalid-email")
        context4 = MockContext()
        context4.user_data['awaiting_free_lesson_email'] = True
        
        await handle_email_input(update_invalid, context4)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        update_invalid.message.reply_text.assert_called_once()
        error_message = update_invalid.message.reply_text.call_args[0][0]
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_message[:50]}...")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        db_free_lessons.is_user_registered = original_is_registered
        db_free_lessons.get_registration_by_user = original_get_registration
        db_free_lessons.create_free_lesson_registration = original_create_registration
        db_events.log_event = original_log_event


if __name__ == "__main__":
    asyncio.run(test_free_lesson_flow())