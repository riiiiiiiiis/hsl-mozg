#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, –∑–∞–≥—Ä—É–∑–∏–ª —á–µ–∫ (–Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω), –æ—Ç–º–µ–Ω–µ–Ω–æ.
"""

import sqlite3
from datetime import datetime, timedelta
import config

def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect(config.DB_NAME)

def get_unconfirmed_participants():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, –≥–¥–µ confirmed != 2 (–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)
    cursor.execute("""
        SELECT user_id, username, first_name, chosen_course, course_id, confirmed, created_at
        FROM bookings
        WHERE confirmed != 2
        ORDER BY created_at DESC
    """)
    
    participants = cursor.fetchall()
    conn.close()
    
    return participants

def display_unconfirmed_by_status():
    """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    participants = get_unconfirmed_participants()
    
    if not participants:
        print("‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {len(participants)}\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    statuses = {
        0: {"name": "üïê –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "participants": []},
        1: {"name": "üì∏ –ó–∞–≥—Ä—É–∑–∏–ª–∏ —á–µ–∫ (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)", "participants": []},
        -1: {"name": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", "participants": []}
    }
    
    for p in participants:
        status = p[5]  # confirmed field
        if status in statuses:
            statuses[status]["participants"].append(p)
    
    # –í—ã–≤–æ–¥ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    for status_code, status_info in statuses.items():
        if status_info["participants"]:
            print(f"\n{status_info['name']}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(status_info['participants'])}")
            print("-" * 80)
            
            for idx, (user_id, username, first_name, chosen_course, course_id, confirmed, created_at) in enumerate(status_info['participants'], 1):
                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                created_dt = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
                time_passed = datetime.now() - created_dt
                days_passed = time_passed.days
                hours_passed = time_passed.seconds // 3600
                
                print(f"{idx}. User ID: {user_id}")
                print(f"   –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"   Username: @{username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   –ö—É—Ä—Å: {chosen_course}")
                print(f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}")
                print(f"   –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {days_passed} –¥–Ω. {hours_passed} —á.")
                
                # –û—Å–æ–±—ã–µ –ø–æ–º–µ—Ç–∫–∏
                if status_code == 0 and days_passed > 1:
                    print(f"   ‚ö†Ô∏è  –ù–µ –æ–ø–ª–∞—Ç–∏–ª –±–æ–ª–µ–µ —Å—É—Ç–æ–∫!")
                elif status_code == 1 and days_passed > 0:
                    print(f"   ‚ö†Ô∏è  –ß–µ–∫ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–ª–µ–µ {days_passed} –¥–Ω–µ–π!")
                
                print()

def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    cursor.execute("SELECT COUNT(*) FROM bookings")
    total = cursor.fetchone()[0]
    
    # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    cursor.execute("SELECT confirmed, COUNT(*) FROM bookings GROUP BY confirmed")
    status_counts = cursor.fetchall()
    
    # –ü–æ –∫—É—Ä—Å–∞–º
    cursor.execute("SELECT chosen_course, COUNT(*) FROM bookings GROUP BY chosen_course")
    course_counts = cursor.fetchall()
    
    conn.close()
    
    print("\n" + "=" * 80)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    print(f"\n–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total}")
    
    print("\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    status_names = {0: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", 1: "–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫", 2: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", -1: "–û—Ç–º–µ–Ω–µ–Ω–æ"}
    for status, count in status_counts:
        print(f"  {status_names.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {count}")
    
    print("\n–ü–æ –∫—É—Ä—Å–∞–º:")
    for course, count in course_counts:
        print(f"  {course}: {count}")

def get_pending_payment_ids():
    """–ü–æ–ª—É—á–∏—Ç—å user_id —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª (confirmed = 0)"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT user_id, username, first_name, created_at
        FROM bookings
        WHERE confirmed = 0
        ORDER BY created_at DESC
    """)
    
    pending = cursor.fetchall()
    conn.close()
    
    if pending:
        print(f"\nüí∞ User IDs –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã ({len(pending)} —á–µ–ª.):")
        user_ids = [p[0] for p in pending]
        print(f"IDs: {user_ids}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ –¥–æ–ª–≥–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç
        print("\n‚è∞ –î–æ–ª–≥–æ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤):")
        old_pending = []
        for user_id, username, first_name, created_at in pending:
            created_dt = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
            if datetime.now() - created_dt > timedelta(days=1):
                old_pending.append((user_id, username, first_name, created_at))
        
        if old_pending:
            for user_id, username, first_name, created_at in old_pending:
                print(f"  - {first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{username or '–±–µ–∑ username'}) - ID: {user_id}, –¥–∞—Ç–∞: {created_at}")
        else:
            print("  –ù–µ—Ç")

if __name__ == "__main__":
    print("üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã...\n")
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        display_unconfirmed_by_status()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        get_statistics()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        get_pending_payment_ids()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")