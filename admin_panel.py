#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫—É—Ä—Å–æ–≤
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import sqlite3
from datetime import datetime, timedelta
import subprocess
import sys
import config

class AdminPanel:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - HashSlash School")
        self.root.geometry("900x700")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéì –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", 
                               font=('Arial', 18, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.create_buttons(main_frame)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.create_output_area(main_frame)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar(main_frame)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics()
    
    def create_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.LabelFrame(parent, text="–î–µ–π—Å—Ç–≤–∏—è", padding="10")
        button_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        ttk.Button(button_frame, text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                  command=self.show_statistics, width=25).grid(row=0, column=0, padx=5, pady=5)
        
        ttk.Button(button_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", 
                  command=self.show_confirmed, width=25).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(button_frame, text="‚è≥ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", 
                  command=self.show_unconfirmed, width=25).grid(row=0, column=2, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        ttk.Button(button_frame, text="üí¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", 
                  command=self.prepare_messaging, width=25).grid(row=1, column=0, padx=5, pady=5)
        
        ttk.Button(button_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏", 
                  command=self.delete_test_records, width=25).grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.refresh_data, width=25).grid(row=1, column=2, padx=5, pady=5)
    
    def create_output_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞"""
        output_frame = ttk.LabelFrame(parent, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        output_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.output_text = scrolledtext.ScrolledText(output_frame, height=20, width=80, 
                                                     font=('Courier', 10))
        self.output_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.output_text.tag_configure("header", font=('Courier', 12, 'bold'))
        self.output_text.tag_configure("success", foreground="green")
        self.output_text.tag_configure("error", foreground="red")
        self.output_text.tag_configure("warning", foreground="orange")
        self.output_text.tag_configure("info", foreground="blue")
    
    def create_status_bar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        status_bar = ttk.Label(parent, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E))
    
    def clear_output(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞"""
        self.output_text.delete(1.0, tk.END)
    
    def write_output(self, text, tag=None):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞"""
        self.output_text.insert(tk.END, text, tag)
        self.output_text.see(tk.END)
        self.root.update()
    
    def get_db_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(config.DB_NAME)
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.clear_output()
        self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self.write_output("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n", "header")
            self.write_output("=" * 70 + "\n\n")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute("SELECT COUNT(*) FROM bookings")
            total = cursor.fetchone()[0]
            self.write_output(f"–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total}\n\n")
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            self.write_output("–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n", "info")
            cursor.execute("SELECT confirmed, COUNT(*) FROM bookings GROUP BY confirmed")
            status_counts = cursor.fetchall()
            
            status_names = {0: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", 1: "üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫", 
                          2: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", -1: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"}
            
            for status, count in status_counts:
                name = status_names.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                self.write_output(f"  {name}: {count}\n")
            
            # –ü–æ –∫—É—Ä—Å–∞–º
            self.write_output("\n–ü–æ –∫—É—Ä—Å–∞–º:\n", "info")
            cursor.execute("SELECT chosen_course, COUNT(*) FROM bookings GROUP BY chosen_course")
            course_counts = cursor.fetchall()
            
            for course, count in course_counts:
                self.write_output(f"  üìö {course}: {count} —á–µ–ª.\n")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.write_output("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:\n", "info")
            cursor.execute("""
                SELECT username, first_name, chosen_course, confirmed, created_at 
                FROM bookings 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            
            recent = cursor.fetchall()
            for i, (username, first_name, course, status, created_at) in enumerate(recent, 1):
                status_icon = {0: "‚è≥", 1: "üì∏", 2: "‚úÖ", -1: "‚ùå"}.get(status, "?")
                self.write_output(f"\n{i}. {first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{username or '–±–µ–∑ username'})\n")
                self.write_output(f"   –ö—É—Ä—Å: {course}\n")
                self.write_output(f"   –°—Ç–∞—Ç—É—Å: {status_icon}\n")
                self.write_output(f"   –î–∞—Ç–∞: {created_at}\n")
            
            conn.close()
            self.status_var.set("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            self.write_output(f"\n–û—à–∏–±–∫–∞: {str(e)}\n", "error")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def show_confirmed(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        self.clear_output()
        self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT user_id, username, first_name, chosen_course, created_at
                FROM bookings
                WHERE confirmed = 2
                ORDER BY chosen_course, created_at DESC
            """)
            
            participants = cursor.fetchall()
            conn.close()
            
            self.write_output("‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò\n", "header")
            self.write_output("=" * 70 + "\n\n")
            
            if not participants:
                self.write_output("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n", "warning")
            else:
                self.write_output(f"–í—Å–µ–≥–æ: {len(participants)} —á–µ–ª–æ–≤–µ–∫\n\n", "success")
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
                courses = {}
                for p in participants:
                    course = p[3]
                    if course not in courses:
                        courses[course] = []
                    courses[course].append(p)
                
                for course_name, course_participants in courses.items():
                    self.write_output(f"\nüìö {course_name} ({len(course_participants)} —á–µ–ª.)\n", "info")
                    self.write_output("-" * 50 + "\n")
                    
                    for i, (user_id, username, first_name, _, created_at) in enumerate(course_participants, 1):
                        self.write_output(f"{i}. {first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ")
                        self.write_output(f"(@{username or '–±–µ–∑ username'})\n")
                        self.write_output(f"   ID: {user_id}, –î–∞—Ç–∞: {created_at}\n\n")
                
                # –°–ø–∏—Å–æ–∫ ID –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                user_ids = [p[0] for p in participants]
                self.write_output(f"\nüí¨ User IDs –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {user_ids}\n", "info")
            
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(participants)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
        except Exception as e:
            self.write_output(f"\n–û—à–∏–±–∫–∞: {str(e)}\n", "error")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def show_unconfirmed(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        self.clear_output()
        self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT user_id, username, first_name, chosen_course, confirmed, created_at
                FROM bookings
                WHERE confirmed != 2
                ORDER BY confirmed, created_at DESC
            """)
            
            participants = cursor.fetchall()
            conn.close()
            
            self.write_output("‚è≥ –ù–ï–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò\n", "header")
            self.write_output("=" * 70 + "\n\n")
            
            if not participants:
                self.write_output("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É!\n", "success")
            else:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                statuses = {
                    0: {"name": "üïê –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "participants": []},
                    1: {"name": "üì∏ –ó–∞–≥—Ä—É–∑–∏–ª–∏ —á–µ–∫ (–æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)", "participants": []},
                    -1: {"name": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", "participants": []}
                }
                
                for p in participants:
                    status = p[4]
                    if status in statuses:
                        statuses[status]["participants"].append(p)
                
                for status_code, status_info in statuses.items():
                    if status_info["participants"]:
                        self.write_output(f"\n{status_info['name']} ({len(status_info['participants'])} —á–µ–ª.)\n", "info")
                        self.write_output("-" * 50 + "\n")
                        
                        for i, (user_id, username, first_name, course, _, created_at) in enumerate(status_info["participants"], 1):
                            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
                            created_dt = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
                            time_passed = datetime.now() - created_dt
                            days = time_passed.days
                            hours = time_passed.seconds // 3600
                            
                            self.write_output(f"{i}. {first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ")
                            self.write_output(f"(@{username or '–±–µ–∑ username'})\n")
                            self.write_output(f"   –ö—É—Ä—Å: {course}\n")
                            self.write_output(f"   ID: {user_id}, –î–∞—Ç–∞: {created_at}\n")
                            self.write_output(f"   –ü—Ä–æ—à–ª–æ: {days} –¥–Ω. {hours} —á.\n")
                            
                            if status_code == 0 and days > 1:
                                self.write_output("   ‚ö†Ô∏è  –ù–µ –æ–ø–ª–∞—Ç–∏–ª –±–æ–ª–µ–µ —Å—É—Ç–æ–∫!\n", "warning")
                            
                            self.write_output("\n")
            
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(participants)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
        except Exception as e:
            self.write_output(f"\n–û—à–∏–±–∫–∞: {str(e)}\n", "error")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def prepare_messaging(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.clear_output()
        self.write_output("üí¨ –ü–û–î–ì–û–¢–û–í–ö–ê –†–ê–°–°–´–õ–ö–ò\n", "header")
        self.write_output("=" * 70 + "\n\n")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            result = subprocess.run([sys.executable, 'send_message_to_confirmed.py'], 
                                  capture_output=True, text=True)
            
            if result.stdout:
                self.write_output(result.stdout)
            if result.stderr:
                self.write_output(result.stderr, "error")
            
            self.write_output("\n‚ö†Ô∏è  –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!\n", "warning")
            self.write_output("–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ send_message_to_confirmed.py\n")
            
        except Exception as e:
            self.write_output(f"\n–û—à–∏–±–∫–∞: {str(e)}\n", "error")
    
    def delete_test_records(self):
        """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM bookings WHERE username = 'r1iiis'")
        count = cursor.fetchone()[0]
        conn.close()
        
        if count == 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @r1iiis –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–ù–∞–π–¥–µ–Ω–æ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @r1iiis.\n\n"
                                   "–£–¥–∞–ª–∏—Ç—å –∏—Ö?")
        
        if result:
            try:
                conn = self.get_db_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM bookings WHERE username = 'r1iiis'")
                deleted = cursor.rowcount
                conn.commit()
                conn.close()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                self.refresh_data()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∏–¥"""
        self.show_statistics()
        self.status_var.set("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    root = tk.Tk()
    app = AdminPanel(root)
    root.mainloop()

if __name__ == "__main__":
    main()